
# defining a function to take the parameter sentence
def alternate_char(sentence):

    # define an empty string variable before their use in a loop
    new_sentence = ""
    
    for i in sentence:

        # conditional to check is if the current character in the variable i is equal to an uppercase character 
        if i == i.upper():
        
        # concatenate variable new_sentence with the current value of i converted to lowercase
            new_sentence += i.lower()
            
        # conditional to check is if the current character in variable i is equal to a lowercase character    
        elif i == i.lower(): 
            # concatenate variable new_sentence with the current value of i converted to uppercase
            new_sentence += i.upper()

        # else condition is for any blank spaces, numbers or special characters, basically any non-alphabetic characters  
        else: 
        # concatenate variable new_sentence with the current value of i 
            new_sentence += i
    
    return new_sentence



def string_validation(string_values):

    while True:
        if string_values == "":
            while True:
                string_values = input("An error occurred. Please enter your answer again: ")
                if string_values != "":
                    break
                

        elif string_values.isnumeric() == True:
            while True:
                string_values = input("An error occurred. Please enter your answer again: ")
                if string_values.isnumeric() == False:
    
                    break
        break
    return string_values



def invert_alternate_words(for_alteration):
    # listing_alternates will be a list from the spliting of the parameter for_alteration
    listing_alternates = for_alteration.split()

# for loop in iterating through listing_alternates
    for i in range(len(listing_alternates)):
#conditional allows finding of even and odd indexes
        if i % 2 == 0:
            # even indexes are assinged to be lowercase
            listing_alternates[i] = listing_alternates[i].lower()
        else:
            # odd indexes are assigned to be upercase
            listing_alternates[i] = listing_alternates[i].upper()

# use .join()
    listing_alternates = " ".join(listing_alternates)
    # returning value of listing_alternative
    return listing_alternates
    


second_question = "Please enter your phrase or sentence that rhymes: "
first_question = "Please enter the name of a role model of yours: "

# introducing the purpose of the program
print("Welcome, to our inversion of cases program.\
      \n\nThe first section of the program will invert all characters inputted.\
       \n\nTherefore the characters entered output as followed: \nCapital --> Lowercase \t\t  or \t\t Lowercase --> Capital \n\n ")

# store users input to first the question in a variable role_model 
role_model = input(first_question)

# reassign role model the returned value of function string_validition with role an argument
role_model = string_validation(role_model)


# introduce the second section of the program
print("\n\nThe second section of the program will output a phrase or sentence with words alternating in their casing\
      \n\ne.g. \t\t1st word lower, 2nd word, UPPER 3rd word lower, etc...\n")

# store users response to the second question in variable alternating 
second_response = input(second_question)

# assign alternating_words to return value of function string_validation with second_response as the argument
alternating_words = string_validation(second_response)

# print returned value if alternate_char function in a f-string
print(f"\n\n{alternate_char(role_model)}, is an amazing role model.\n\n")

# print the returned value of invert_alternate_words function in an f-string
print(f"The inversion of your phrase/sentence is as followed:\
      \n{invert_alternate_words(alternating_words)}")


